// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cart   Cart?

  @@map("users")
}

model Book {
  id            String   @id @default(cuid())
  title         String
  author        String
  description   String
  price         Float
  category      String
  isbn          String   @unique
  publisher     String
  publishedDate DateTime
  language      String   @default("English")
  format        Format
  stockQuantity Int      @default(0)
  imageUrl      String?
  rating        Float    @default(0)
  reviewCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("books")
}

model Cart {
  id          String     @id @default(cuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  items CartItem[]

  @@map("carts")
}

model CartItem {
  id       String @id @default(cuid())
  cartId   String
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  bookId   String
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  quantity Int    @default(1)
  price    Float

  @@unique([cartId, bookId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  shippingAddress Json
  paymentMethod   String
  paymentIntentId String?
  trackingNumber  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  bookId   String
  book     Book   @relation(fields: [bookId], references: [id])
  quantity Int
  price    Float

  @@map("order_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum Format {
  HARDCOVER
  PAPERBACK
  EBOOK
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}